## 학습목표
 * 반복문의 이해 및 활용 (for)
 * range 함수 이해
 
### for 반복문 
 - 리스트, 문자열 등등 순회 가능한 객체를 순회하면서 값을 처리할 때 사용
 - 아래와 같은 문법으로 사용
 - 여기서 i는 매번 수행 될 때마다, a의 아이템으로 순차적으로 변경 됨
 - 모든 아이템이 순회되면 for 블록 종료
 
```python
a = [1, 2, 4, 3, 5]
for i in a:
    print (i, i * 2)
```

= 1 2
  2 4
  4 8
  3 6
  5 10
  Hello

#### 문자열의 아이템 출력하기
 - 문자열의 경우 순회 가능, 리스트의 유사하게 순회 가능

a = 'hello world'
for character in a:
    print(character)
    
h
e
l
l
o
 
w
o
r
l
d


for x in 10:
    print(x)

실수, 정수 에러로 인한 출력 x

#### 리스트 아이템 출력하기

a = [1, 10, 3, 4, 5]
for num in a:
    if num % 2 == 0:
        print(num/2)
    else:
        print(num+1)
        
= 2
  5.0
  4
  2.0
  6
# 리스트로 묶을 경우 출력 가능

#### dict의 아이템 출력하기
  - dictionary의 경우 기본적으로 순회 하게 되면 key값을 참조
  - keys()함수를 이용하여 key 값만 순회 가능
  - values()함수를 이용하여 value 값만 순회 가능
  - items()함수를 이용하여 tuple형태로 key, value 순회 가능
 
a = {'korea' : 'seoul', 'japan' : 'tokyo', 'canada' : 'ottawa'}
for key in a:
    print(key, a[key])
= korea seoul
  japan tokyo
  canada ottawa

for key in a:
    print(key)
    
= korea
  japan
  canada

for key in a:
    print(a[key])

for value in a.values():
    print(value)

= seoul
  tokyo
  ottawa

list(a.items())

= [('korea', 'seoul'), ('japan', 'tokyo'), ('canada', 'ottawa')]

for key, balue in a.items():
    print(key, value)
    
= korea ottawa
  japan ottawa
  canada ottawa
  
#### for에서 index 사용하기
  - 기본적으로 for에 리스트를 순회하는 경우, 값만 추출 함
  - 아래와 같은 코드로 인덱스와 값 모두 사용 가능(enumerate 함수 이용)

```python
a = [1, 2, 4, 3, 5]
for i, val in enumerate(a):
    print i, val
```

a = [1, 2, 4, 3, 5]
for index, num in enumerate(a):
    if index > 3:
        print(index, num)
        
= 4 5

####  break
  - for의 경우에도 특정 조건일 때, loop 종료가 가능
  
a = [100, 90, 80, 70, 60, 50]
for num in a:
    if num < 80:
        break
        
    print(num)

= 100
  90
  80

#### continue
 - 해당 아이템을 건너 뛰고 싶을 때 사용
 
a = [100, 90, 80, 70, 60, 50]
for num in a:
    if num >= 60 and num<= 70:
        continue
        
    print(num)
    
= 100
  90
  80
  50
  

#### loop 중첩
  - 반복문의 경우에도 중첩하여 사용 가능
  - 중첩이라는 것은 반복문 블록의 코드안에 또 반복문의 코드가 작성되는 것을 의미
  - 이런 경우, 내부 루프는 외부 루프가 수행되는 만큼 반복 수행 됨
  - 또한 중첩의 경우 무한히 가능

```python
a = [1, 2, 4]
for i in a:
    for j in a:
        print i * j
```

a = [1, 2, 4]
for i in a:
    for j in a:
        print (i * j)
        
= 1
  2
  4
  2
  4
  8
  4
  8
  16

#### 구구단 출력하기

x = [2, 3, 4, 5, 6, 7, 8, 9]
y = [1, 2, 3, 4, 5, 6, 7, 8, 9]

for i in x:
    for j in y:
        print(i, 'x', j, '=', i*j)

=
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
4 x 1 = 4
4 x 2 = 8
4 x 3 = 12
4 x 4 = 16
4 x 5 = 20
4 x 6 = 24
4 x 7 = 28
4 x 8 = 32
4 x 9 = 36
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
6 x 1 = 6
6 x 2 = 12
6 x 3 = 18
6 x 4 = 24
6 x 5 = 30
6 x 6 = 36
6 x 7 = 42
6 x 8 = 48
6 x 9 = 54
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
8 x 1 = 8
8 x 2 = 16
8 x 3 = 24
8 x 4 = 32
8 x 5 = 40
8 x 6 = 48
8 x 7 = 56
8 x 8 = 64
8 x 9 = 72
9 x 1 = 9
9 x 2 = 18
9 x 3 = 27
9 x 4 = 36
9 x 5 = 45
9 x 6 = 54
9 x 7 = 63
9 x 8 = 72
9 x 9 = 81

#### collection의 길이
 - len() 내장함수로 계산 가능
 - 내장함수란 파이썬 내부에 구현되어 있어서, import하지 않고도 사용 가능한 함수를 의미
 - abs, len, type, range 등이 있음 
 
a = [1, 2, 3, 4, 5, 1]
print(len(a))
len('hello world')

#### range 함수
  - 리스트를 쉽게 만들 수 있는 내장함수
  - 주어진 값에 따라 다양한 결과를 반환
 
```python
range(10)       -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
range(2, 10)    -> [2, 3, 4, 5, 6, 7, 8, 9] 
range(2, 10, 3) -> [2, 5, 8] 
```

* 1 - 100까지의 리스트 생성하기

a = list(range(1,101))
print(a)

* 1부터 100사이의 5의 배수만을 갖는 리스트 생성하기

a = list(range(1, 101, 5))
print(a)

